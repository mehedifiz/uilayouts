{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "liquid-glass-sidebar-menu",
  "type": "registry:component",
  "dependencies": [
    "motion"
  ],
  "devDependencies": [],
  "registryDependencies": [],
  "files": [
    {
      "path": "./registry/components/liquid-glass/sidebar-menu.tsx",
      "content": "import { LiquidGlassCard } from '@/components/ui/liquid-glass';\r\n\r\nimport {\r\n  Bell,\r\n  Search,\r\n  BarChart2,\r\n  Settings,\r\n  Home,\r\n} from 'lucide-react';\r\n\r\nconst SidebarMenu = () => {\r\n  return (\r\n    <>\r\n      <div\r\n        className='p-8 flex max-w-full py-20 rounded-xl items-center justify-center'\r\n        style={{\r\n          background:\r\n            'url(\"https://images.unsplash.com/photo-1752440093057-1c188e7137e9?q=80&w=764&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D\") center / cover no-repeat',\r\n        }}\r\n      >\r\n        <LiquidGlassCard glowIntensity=\"sm\" shadowIntensity=\"sm\" borderRadius=\"12px\" blurIntensity=\"sm\" draggable className='p-4 w-[280px]'>\r\n          <nav className='space-y-2 w-full'>\r\n            <button\r\n              className='w-full flex items-center gap-3 px-4 py-3 rounded-xl bg-white text-gray-800 font-medium transition-colors hover:bg-gray-100'\r\n              aria-current='page'\r\n            >\r\n              <Home className='w-5 h-5' />\r\n              <span>Dashboard</span>\r\n            </button>\r\n\r\n            <button\r\n              className='w-full flex items-center gap-3 px-4 py-3 rounded-xl text-white font-medium transition-colors hover:bg-white/20'\r\n            >\r\n              <Search className='w-5 h-5' />\r\n              <span>Search</span>\r\n            </button>\r\n\r\n            <button\r\n              className='w-full flex items-center gap-3 px-4 py-3 rounded-xl text-white font-medium transition-colors hover:bg-white/20'\r\n            >\r\n              <BarChart2 className='w-5 h-5' />\r\n              <span>Sales Analytics</span>\r\n            </button>\r\n\r\n            <button\r\n              className='w-full flex items-center gap-3 px-4 py-3 rounded-xl text-white font-medium transition-colors hover:bg-white/20'\r\n            >\r\n              <Bell className='w-5 h-5' />\r\n              <span>Notification</span>\r\n            </button>\r\n\r\n            <button\r\n              className='w-full flex items-center gap-3 px-4 py-3 rounded-xl text-white font-medium transition-colors hover:bg-white/20'\r\n            >\r\n              <Settings className='w-5 h-5' />\r\n              <span>Account Settings</span>\r\n            </button>\r\n          </nav>\r\n        </LiquidGlassCard>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SidebarMenu;\r\n",
      "type": "registry:component"
    },
    {
      "path": "./components/ui/liquid-glass.tsx",
      "content": "// @ts-nocheck\r\n'use client';\r\nimport React, { useState } from 'react';\r\nimport { motion } from 'motion/react';\r\n\r\nimport { ClassValue, clsx } from 'clsx';\r\nimport { twMerge } from 'tailwind-merge';\r\n\r\nfunction cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs));\r\n}\r\n\r\ninterface LiquidGlassCardProps {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  draggable?: boolean;\r\n  expandable?: boolean;\r\n  width?: string;\r\n  height?: string;\r\n  expandedWidth?: string;\r\n  expandedHeight?: string;\r\n  blurIntensity?: 'sm' | 'md' | 'lg' | 'xl';\r\n  shadowIntensity?: 'none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl';\r\n  borderRadius?: string;\r\n  glowIntensity?: 'none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl';\r\n}\r\n\r\nexport const LiquidGlassCard = ({\r\n  children,\r\n  className = '',\r\n  draggable = true,\r\n  expandable = false,\r\n  width,\r\n  height,\r\n  expandedWidth,\r\n  expandedHeight,\r\n  blurIntensity = 'xl',\r\n  borderRadius = '32px',\r\n  glowIntensity = 'sm',\r\n  shadowIntensity = 'md',\r\n  ...props\r\n}: LiquidGlassCardProps) => {\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n\r\n  const handleToggleExpansion = (e: {\r\n    target: { closest: (arg0: string) => any };\r\n  }) => {\r\n    if (!expandable) return;\r\n    // Don't toggle if clicking on interactive elements\r\n    if (e.target.closest('a, button, input, select, textarea')) return;\r\n    setIsExpanded(!isExpanded);\r\n  };\r\n\r\n  const blurClasses = {\r\n    sm: 'backdrop-blur-sm',\r\n    md: 'backdrop-blur-md',\r\n    lg: 'backdrop-blur-lg',\r\n    xl: 'backdrop-blur-xl',\r\n  };\r\n\r\n  const shadowStyles = {\r\n    none: 'inset 0 0 0 0 rgba(255, 255, 255, 0)',\r\n    xs: 'inset 1px 1px 1px 0 rgba(255, 255, 255, 0.3), inset -1px -1px 1px 0 rgba(255, 255, 255, 0.3)',\r\n    sm: 'inset 2px 2px 2px 0 rgba(255, 255, 255, 0.35), inset -2px -2px 2px 0 rgba(255, 255, 255, 0.35)',\r\n    md: 'inset 3px 3px 3px 0 rgba(255, 255, 255, 0.45), inset -3px -3px 3px 0 rgba(255, 255, 255, 0.45)',\r\n    lg: 'inset 4px 4px 4px 0 rgba(255, 255, 255, 0.5), inset -4px -4px 4px 0 rgba(255, 255, 255, 0.5)',\r\n    xl: 'inset 6px 6px 6px 0 rgba(255, 255, 255, 0.55), inset -6px -6px 6px 0 rgba(255, 255, 255, 0.55)',\r\n    '2xl':\r\n      'inset 8px 8px 8px 0 rgba(255, 255, 255, 0.6), inset -8px -8px 8px 0 rgba(255, 255, 255, 0.6)',\r\n  };\r\n\r\n  const glowStyles = {\r\n    none: '0 4px 4px rgba(0, 0, 0, 0.05), 0 0 12px rgba(0, 0, 0, 0.05)',\r\n    xs: '0 4px 4px rgba(0, 0, 0, 0.15), 0 0 12px rgba(0, 0, 0, 0.08), 0 0 16px rgba(255, 255, 255, 0.05)',\r\n    sm: '0 4px 4px rgba(0, 0, 0, 0.15), 0 0 12px rgba(0, 0, 0, 0.08), 0 0 24px rgba(255, 255, 255, 0.1)',\r\n    md: '0 4px 4px rgba(0, 0, 0, 0.15), 0 0 12px rgba(0, 0, 0, 0.08), 0 0 32px rgba(255, 255, 255, 0.15)',\r\n    lg: '0 4px 4px rgba(0, 0, 0, 0.15), 0 0 12px rgba(0, 0, 0, 0.08), 0 0 40px rgba(255, 255, 255, 0.2)',\r\n    xl: '0 4px 4px rgba(0, 0, 0, 0.15), 0 0 12px rgba(0, 0, 0, 0.08), 0 0 48px rgba(255, 255, 255, 0.25)',\r\n    '2xl':\r\n      '0 4px 4px rgba(0, 0, 0, 0.15), 0 0 12px rgba(0, 0, 0, 0.08), 0 0 60px rgba(255, 255, 255, 0.3)',\r\n  };\r\n\r\n  const containerVariants = expandable\r\n    ? {\r\n        collapsed: {\r\n          width: width || 'auto',\r\n          height: height || 'auto',\r\n          transition: {\r\n            duration: 0.4,\r\n            ease: [0.5, 1.5, 0.5, 1],\r\n          },\r\n        },\r\n        expanded: {\r\n          width: expandedWidth || 'auto',\r\n          height: expandedHeight || 'auto',\r\n          transition: {\r\n            duration: 0.4,\r\n            ease: [0.5, 1.5, 0.5, 1],\r\n          },\r\n        },\r\n      }\r\n    : {};\r\n\r\n  const MotionComponent = draggable || expandable ? motion.div : 'div';\r\n\r\n  const motionProps =\r\n    draggable || expandable\r\n      ? {\r\n          variants: expandable ? containerVariants : undefined,\r\n          animate: expandable\r\n            ? isExpanded\r\n              ? 'expanded'\r\n              : 'collapsed'\r\n            : undefined,\r\n          onClick: expandable ? handleToggleExpansion : undefined,\r\n          drag: draggable,\r\n          dragConstraints: draggable\r\n            ? { left: 0, right: 0, top: 0, bottom: 0 }\r\n            : undefined,\r\n          dragElastic: draggable ? 0.3 : undefined,\r\n          dragTransition: draggable\r\n            ? {\r\n                bounceStiffness: 300,\r\n                bounceDamping: 10,\r\n                power: 0.3,\r\n              }\r\n            : undefined,\r\n          whileDrag: draggable ? { scale: 1.02 } : undefined,\r\n          whileHover: { scale: 1.01 },\r\n          whileTap: { scale: 0.98 },\r\n        }\r\n      : {};\r\n\r\n  return (\r\n    <>\r\n      {/* Hidden SVG Filter */}\r\n      <svg className='hidden'>\r\n        <defs>\r\n          <filter\r\n            id='glass-blur'\r\n            x='0'\r\n            y='0'\r\n            width='100%'\r\n            height='100%'\r\n            filterUnits='objectBoundingBox'\r\n          >\r\n            <feTurbulence\r\n              type='fractalNoise'\r\n              baseFrequency='0.003 0.007'\r\n              numOctaves='1'\r\n              result='turbulence'\r\n            />\r\n            <feDisplacementMap\r\n              in='SourceGraphic'\r\n              in2='turbulence'\r\n              scale='200'\r\n              xChannelSelector='R'\r\n              yChannelSelector='G'\r\n            />\r\n          </filter>\r\n        </defs>\r\n      </svg>\r\n      <MotionComponent\r\n        className={cn(\r\n          `relative ${draggable ? 'cursor-grab active:cursor-grabbing' : ''} ${expandable ? 'cursor-pointer' : ''}`,\r\n          className\r\n        )}\r\n        style={{\r\n          borderRadius,\r\n          ...(width && !expandable && { width }),\r\n          ...(height && !expandable && { height }),\r\n        }}\r\n        {...motionProps}\r\n        {...props}\r\n      >\r\n        {/* Bend Layer (Backdrop blur with distortion) */}\r\n        <div\r\n          className={`absolute inset-0 ${blurClasses[blurIntensity]} z-0`}\r\n          style={{\r\n            borderRadius,\r\n            filter: 'url(#glass-blur)',\r\n          }}\r\n        />\r\n\r\n        {/* Face Layer (Main shadow and glow) */}\r\n        <div\r\n          className='absolute inset-0 z-10'\r\n          style={{\r\n            borderRadius,\r\n            boxShadow: glowStyles[glowIntensity],\r\n          }}\r\n        />\r\n\r\n        {/* Edge Layer (Inner highlights) */}\r\n        <div\r\n          className='absolute inset-0 z-20'\r\n          style={{\r\n            borderRadius,\r\n            boxShadow: shadowStyles[shadowIntensity],\r\n          }}\r\n        />\r\n\r\n        {/* Content */}\r\n        <div className={cn('relative z-30')}>{children}</div>\r\n      </MotionComponent>\r\n    </>\r\n  );\r\n};\r\n",
      "type": "registry:component"
    }
  ]
}